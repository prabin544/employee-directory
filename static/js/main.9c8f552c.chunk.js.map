{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","employeeData","setEmployeeData","useEffect","temp","employee","filter","e","className","Container","Row","Col","md","Form","Group","Control","value","type","placeholder","onChange","preventDefault","target","handleSubmit","span","offset","sorted","console","log","sort","a","b","localeCompare","occupation","sortArray","map","i","Card","style","width","Img","variant","src","image","ListGroup","Item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wiEA+FeA,MAtFf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGyBF,mBAAS,IAHlC,mBAGRG,EAHQ,KAGMC,EAHN,KAyCb,OApCAC,qBAAU,WACR,IAAIC,EAAKC,EAASC,QAAO,SAACC,GAAD,OACvBA,EAAER,OAASA,KAEbG,EAAgBE,KAEf,CAACL,IAEJI,qBAAU,WACRD,EAAgBG,KAChB,IA2BA,sBAAKG,UAAU,MAAf,UACE,oDAA2B,uBAC3B,eAACC,EAAA,EAAD,WACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAACC,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,MAAN,UACE,cAACD,EAAA,EAAKE,QAAN,CACAC,MAAOjB,EACPkB,KAAK,OACLC,YAAY,2BACZnB,KAAK,OACLoB,SAAU,SAACZ,GAAD,OArCD,SAAAA,GACnBA,EAAEa,iBACFpB,EAAQO,EAAEc,OAAOL,OAmCQM,CAAaf,YAKlC,cAACI,EAAA,EAAD,CAAKC,GAAI,CAAEW,KAAM,EAAGC,OAAQ,GAA5B,SACE,yBAAQL,SAAU,SAACZ,IArCT,SAAAU,GAGhB,IAAIQ,EACJ,OAHAC,QAAQC,IAAIV,EAAKI,OAAOL,OAGhBC,EAAKI,OAAOL,OAClB,IAAK,OACHS,EAAS,YAAIxB,GAAc2B,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE9B,KAAKgC,cAAcD,EAAE/B,SACjE,MACF,IAAK,aACH0B,EAAS,YAAIxB,GAAc2B,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEG,WAAWD,cAAcD,EAAEE,eAK3E9B,EAAgBuB,GAuBcQ,CAAU1B,IAAlC,UACE,6CACA,wBAASS,MAAM,OAAf,kBACA,wBAASA,MAAM,aAAf,gCAIN,eAACN,EAAA,EAAD,WACGgB,QAAQC,IAAI1B,GACZA,EAAaiC,KAAI,SAAC7B,EAAU8B,GAAX,OAChB,eAACC,EAAA,EAAD,CAAcC,MAAO,CAAEC,MAAO,SAA9B,UACE,qBAAK9B,UAAU,gBAAf,SACE,cAAC4B,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKpC,EAASqC,UAEtC,eAACC,EAAA,EAAD,CAAWnC,UAAU,UAAUgC,QAAQ,QAAvC,UACE,eAACG,EAAA,EAAUC,KAAX,oBAAuBvC,EAASN,QAChC,cAAC4C,EAAA,EAAUC,KAAX,UAAiBvC,EAAS2B,kBANrBG,gBCnENU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9c8f552c.chunk.js","sourcesContent":["import './App.css';\nimport {ListGroup, Form, Card} from \"react-bootstrap\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport employee from './employee.json';\nimport React, {useEffect, useState} from \"react\";\n\n\nfunction App() {\n  \n  const [name, setName] = useState(\"\");\n  let [employeeData, setEmployeeData] = useState([]);\n  \n  useEffect(() => {\n    let temp=employee.filter((e)=>\n      e.name === name\n    )\n    setEmployeeData(temp);\n      \n  }, [name]);\n\n  useEffect(()=>{\n    setEmployeeData(employee)\n  },[]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setName(e.target.value);\n  };\n\n  \n  const sortArray = type => {\n    console.log(type.target.value);\n    \n    let sorted;\n    switch (type.target.value) {\n      case \"name\":\n        sorted = [...employeeData].sort((a, b) => a.name.localeCompare(b.name));\n        break;\n      case \"occupation\":\n        sorted = [...employeeData].sort((a, b) => a.occupation.localeCompare(b.occupation));\n        break;\n      default:\n        break;\n    }\n    setEmployeeData(sorted);\n   \n  };\n\n  return (\n    <div className=\"App\">\n      <h2>Employee Directory</h2><br />\n      <Container>\n      <Row>\n        <Col md={5}>\n          <Form >\n            <Form.Group>\n              <Form.Control \n              value={name}\n              type=\"text\" \n              placeholder=\"Search by employee name \"\n              name=\"name\"\n              onChange={(e)=>handleSubmit(e)} \n              />\n            </Form.Group>\n          </Form>\n        </Col>\n        <Col md={{ span: 5, offset: 2 }}>\n          <select onChange={(e)=>{sortArray(e)}}>\n            <option >Sort By</option>\n            <option  value=\"name\">Name</option>\n            <option  value=\"occupation\">Occupation</option>\n          </select>\n        </Col>\n      </Row>\n      <Row>\n        {console.log(employeeData)}\n        {employeeData.map((employee, i) => (\n          <Card key={i} style={{ width: '14rem' }}>\n            <div className=\"img-container\">\n              <Card.Img variant=\"top\" src={employee.image} />\n            </div>\n              <ListGroup className=\"content\" variant=\"flush\">\n                <ListGroup.Item>Name: {employee.name}</ListGroup.Item>\n                <ListGroup.Item>{employee.occupation}</ListGroup.Item>\n              </ListGroup>\n          </Card>\n          ))}\n      </Row>\n      </Container>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}